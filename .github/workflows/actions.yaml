name: actions
on:
  push:
    paths-ignore:
      - README.md
      - LICENSE.md
      - 'docs/**'
      - '.github/workflows/codeql-analysis.yaml'
      - '.github/workflows/devcontainer-ci.yaml'
      - '.github/dependabot.yaml'
  pull_request:
    paths-ignore:
      - README.md
      - LICENSE.md
      - 'docs/**'
      - '.github/workflows/codeql-analysis.yaml'
      - '.github/workflows/devcontainer-ci.yaml'
      - '.github/dependabot.yaml'

jobs:
  initial-build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Starting build pipeline for jjversion."
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: ls -al
      - uses: actions/setup-go@v2
      - run: go vet
      - run: go test ./...
      - run: go build -a -v -o jjversion
      - run: sudo mv jjversion /usr/local/bin
      - run: jjversion
      - run: echo "VERSION=$(jjversion | jq --raw-output '.MajorMinorPatch')" >> $GITHUB_ENV
      - run: sudo rm /usr/local/bin/jjversion
      - run: go build -a -v -o jjversion -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: sudo cp jjversion /usr/local/bin
      - run: jjversion
      - run: jjversion --version
      - name: Upload jjversion
        uses: actions/upload-artifact@v2
        with:
          name: jjversion
          path: jjversion

  docker-build:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Docker BuildKit
        uses: docker/setup-buildx-action@v1
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin
      - run: jjversion
      - run: echo "VERSION=$(jjversion | jq --raw-output '.MajorMinorPatch')" >> $GITHUB_ENV
      - run: |
          docker build -t jjliggett/jjversion . \
            --build-arg BUILD_VERSION="${{ env.VERSION }}" \
            --label "org.opencontainers.image.created=$(date +%Y-%m-%dT%H:%M:%S%z)" \
            --label "org.opencontainers.image.version=${{ env.VERSION }}" \
            --label "org.opencontainers.image.authors=jjliggett" \
            --label "org.opencontainers.image.url=https://github.com/jjliggett/jjversion" \
            --label "org.opencontainers.image.documentation=https://github.com/jjliggett/jjversion" \
            --label "org.opencontainers.image.source=https://github.com/jjliggett/jjversion" \
            --label "org.opencontainers.image.revision=$(git rev-parse HEAD)" \
            --label "org.opencontainers.image.title=jjversion" \
            --label "org.opencontainers.image.description=A basic versioning utility to version git projects"
      - run: docker inspect jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm jjliggett/jjversion jjversion --version
      - run: docker save jjliggett/jjversion > jjversion.tar
      - name: Upload jjversion.tar
        uses: actions/upload-artifact@v2
        with:
          name: jjversion.tar
          path: jjversion.tar

  docker-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Docker BuildKit
        uses: docker/setup-buildx-action@v1
      - run: docker build -f Dockerfile.test -t jjliggett/jjversion-test .
      - run: docker run --rm jjliggett/jjversion-test
      - run: make test

  matrix-test:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11, windows-2016, windows-2019, windows-2022]
        go: [1.12.x, 1.13.x, 1.14.x, 1.15.x, 1.16.x, 1.17.x]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - run: go vet
      - run: go test ./...
      - run: go build -a -v
      - run: ls

  build-cross-compilation:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin
      - run: jjversion
      - run: echo "VERSION=$(jjversion | jq --raw-output '.MajorMinorPatch')" >> $GITHUB_ENV
      - run: go build -a -v -o jjversion_${{ env.VERSION }} -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOARCH=arm64 go build -a -v -o jjversion_${{ env.VERSION }}_linux_arm64 -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOARCH=arm go build -a -v -o jjversion_${{ env.VERSION }}_linux_arm -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOARCH=386 go build -a -v -o jjversion_${{ env.VERSION }}_linux_386 -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOOS=darwin GOARCH=amd64 go build -a -v -o jjversion_${{ env.VERSION }}_darwin_amd64 -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOOS=windows GOARCH=386 go build -a -v -o jjversion_${{ env.VERSION }}_386.exe -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOOS=windows GOARCH=amd64 go build -a -v -o jjversion_${{ env.VERSION }}.exe -ldflags "-X main.appVersion=${{ env.VERSION }}"
      - run: env GOOS=windows GOARCH=arm go build -a -v -o jjversion_${{ env.VERSION }}_arm.exe -ldflags "-X main.appVersion=${{ env.VERSION }}"

  publish:
    runs-on: ubuntu-latest
    needs:
      - initial-build
      - docker-build
      - docker-test
      - matrix-test
      - test-release-branch
      - test-release-branch-and-tag
      - test-commit-incrementing
      - test-commit-tags-annotated-highest
      - test-commit-tags-lightweight-highest
      - test-docker-release-branch
      - test-docker-release-branch-and-tag
      - test-docker-commit-incrementing
      - test-docker-commit-tags-annotated-highest
      - test-docker-commit-tags-lightweight-highest
      - test-commit-incrementing-custom-versioning-settings
      - test-commit-incrementing-no-settings
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin
      - run: jjversion
      - run: echo "VERSION=$(jjversion | jq --raw-output '.MajorMinorPatch')" >> $GITHUB_ENV
      - run: git reset --hard HEAD~1
      - run: echo "PREVIOUS_COMMIT_VERSION=$(jjversion | jq --raw-output '.MajorMinorPatch')" >> $GITHUB_ENV
      - name: Download jjversion.tar
        uses: actions/download-artifact@v2
        with:
          name: jjversion.tar
      - run: docker load < jjversion.tar
      - run: docker tag jjliggett/jjversion "jjliggett/jjversion:${{ env.VERSION }}"
      - run: docker tag jjliggett/jjversion "ghcr.io/jjliggett/jjversion:${{ env.VERSION }}"
      - run: docker tag jjliggett/jjversion "ghcr.io/jjliggett/jjversion:latest"
      - run: docker images
      - run: echo "The Docker image with this version has not been published yet. The image will be uploaded on the root branch."
        if: ${{ env.VERSION != env.PREVIOUS_COMMIT_VERSION }}
      - run: echo "The Docker image with this version has already been published. The image will not be uploaded on the root branch."
        if: ${{ env.VERSION == env.PREVIOUS_COMMIT_VERSION }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ github.ref == 'refs/heads/root' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: docker push "ghcr.io/jjliggett/jjversion:${{ env.VERSION }}"
        if: ${{ github.ref == 'refs/heads/root' && env.VERSION != env.PREVIOUS_COMMIT_VERSION }}
      - run: docker push "ghcr.io/jjliggett/jjversion:latest"
        if: ${{ github.ref == 'refs/heads/root' && env.VERSION != env.PREVIOUS_COMMIT_VERSION }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        if: ${{ github.ref == 'refs/heads/root' && env.VERSION != env.PREVIOUS_COMMIT_VERSION }}
        with:
          registry: docker.io
          username: jjliggett
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        if: ${{ github.ref == 'refs/heads/root' && env.VERSION != env.PREVIOUS_COMMIT_VERSION }}
        with:
          registry: docker.io
          username: jjliggett
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - run: docker push "jjliggett/jjversion:${{ env.VERSION }}"
        if: ${{ github.ref == 'refs/heads/root' && env.VERSION != env.PREVIOUS_COMMIT_VERSION }}
      - run: docker push jjliggett/jjversion
        if: ${{ github.ref == 'refs/heads/root' && env.VERSION != env.PREVIOUS_COMMIT_VERSION }}

  test-release-branch:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: git checkout -b release/10.42.11
      - run: git commit -m "initial commit" --allow-empty
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: ls -R -al
      - run: sudo cp jjversion /usr/local/bin
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 10.42.11
      - run: jjversion | jq --raw-output '.Major' | grep 10
      - run: jjversion | jq --raw-output '.Minor' | grep 42
      - run: jjversion | jq --raw-output '.Patch' | grep 11
      - run: jjversion | jq --raw-output '.Sha' | grep $(git rev-parse HEAD)

  test-release-branch-and-tag:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: git checkout -b release/10.42.11
      - run: git commit -m "initial commit" --allow-empty
      - run: git tag v42.43.44
      - run: git tag -a v100.100.100 -m "v100.100.100"
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: ls -R -al
      - run: sudo cp jjversion /usr/local/bin
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 10.42.11

  test-commit-incrementing:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          echo "commit_message_incrementing_enabled: true" >> versioning.yaml
          git commit -m "minor: initial commit" --allow-empty
          git commit -m "patch: fix small bug" --allow-empty
          git commit -m "patch: fix another bug" --allow-empty
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.1.2
      - run: |
          git commit -m "minor: added a feature" --allow-empty
          git commit -m "minor: added another feature" --allow-empty
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.3.0
      - run: |
          git commit -m "major: breaking changes etc." --allow-empty
          git commit -m "minor: added new option" --allow-empty
          git commit -m "minor: added another option" --allow-empty
          git commit -m "patch: fixed a bug" --allow-empty
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.6.1
      - run: |
          git commit -m "major: release 1.0.0" --allow-empty
          git tag v1.0.0
          git commit -m "minor: added another feature" --allow-empty
          git commit -m "major: breaking changes" --allow-empty
          git commit -m "minor: small update" --allow-empty
          git commit -m "patch: bugfix for etc." --allow-empty
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 2.1.1

  test-commit-tags-annotated-highest:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          git commit -m "Initial commit" --allow-empty
          git tag v0.0.1
          git tag v0.1.0
          git tag -a "v0.0.10" -m "v0.0.10"
          git tag -a "v1.0.0" -m "v1.0.0"
          git tag -a "v0.10.0" -m "v0.10.0"
          git tag v0.11.0
      - run: git show --quiet HEAD
      - run: git tag -n
      - run: git show-ref --tags -d
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 1.0.0

  test-commit-tags-lightweight-highest:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          git commit -m "Initial commit" --allow-empty
          git tag v0.0.1
          git tag v0.1.0
          git tag -a "v0.0.10" -m "v0.0.10"
          git tag v1.1.1
          git tag -a "v1.0.0" -m "v1.0.0"
          git tag -a "v0.10.0" -m "v0.10.0"
          git tag v0.11.0
      - run: git show --quiet HEAD
      - run: git tag -n
      - run: git show-ref --tags -d
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 1.1.1

  test-docker-release-branch:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: git checkout -b release/10.42.11
      - run: git commit -m "initial commit" --allow-empty
      - name: Download jjversion.tar
        uses: actions/download-artifact@v2
        with:
          name: jjversion.tar
      - run: docker load < jjversion.tar
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 10.42.11
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.Major' | grep 10
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.Minor' | grep 42
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.Patch' | grep 11
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.Sha' | grep $(git rev-parse HEAD)

  test-docker-release-branch-and-tag:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: git checkout -b release/10.42.11
      - run: git commit -m "initial commit" --allow-empty
      - run: git tag v42.43.44
      - run: git tag -a v100.100.100 -m "v100.100.100"
      - name: Download jjversion.tar
        uses: actions/download-artifact@v2
        with:
          name: jjversion.tar
      - run: docker load < jjversion.tar
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 10.42.11

  test-docker-commit-incrementing:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Download jjversion.tar
        uses: actions/download-artifact@v2
        with:
          name: jjversion.tar
      - run: docker load < jjversion.tar

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          echo "commit_message_incrementing_enabled: true" >> versioning.yaml
          git commit -m "minor: initial commit" --allow-empty
          git commit -m "patch: fix small bug" --allow-empty
          git commit -m "patch: fix another bug" --allow-empty
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.1.2
      - run: |
          git commit -m "minor: added a feature" --allow-empty
          git commit -m "minor: added another feature" --allow-empty
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.3.0
      - run: |
          git commit -m "major: breaking changes etc." --allow-empty
          git commit -m "minor: added new option" --allow-empty
          git commit -m "minor: added another option" --allow-empty
          git commit -m "patch: fixed a bug" --allow-empty
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.6.1
      - run: |
          git commit -m "major: release 1.0.0" --allow-empty
          git tag v1.0.0
          git commit -m "minor: added another feature" --allow-empty
          git commit -m "major: breaking changes" --allow-empty
          git commit -m "minor: small update" --allow-empty
          git commit -m "patch: bugfix for etc." --allow-empty
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 2.1.1

  test-docker-commit-tags-annotated-highest:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Download jjversion.tar
        uses: actions/download-artifact@v2
        with:
          name: jjversion.tar
      - run: docker load < jjversion.tar

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          git commit -m "Initial commit" --allow-empty
          git tag v0.0.1
          git tag v0.1.0
          git tag -a "v0.0.10" -m "v0.0.10"
          git tag -a "v1.0.0" -m "v1.0.0"
          git tag -a "v0.10.0" -m "v0.10.0"
          git tag v0.11.0
      - run: git show --quiet HEAD
      - run: git tag -n
      - run: git show-ref --tags -d
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 1.0.0

  test-docker-commit-tags-lightweight-highest:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Download jjversion.tar
        uses: actions/download-artifact@v2
        with:
          name: jjversion.tar
      - run: docker load < jjversion.tar

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          git commit -m "Initial commit" --allow-empty
          git tag v0.0.1
          git tag v0.1.0
          git tag -a "v0.0.10" -m "v0.0.10"
          git tag v1.1.1
          git tag -a "v1.0.0" -m "v1.0.0"
          git tag -a "v0.10.0" -m "v0.10.0"
          git tag v0.11.0
      - run: git show --quiet HEAD
      - run: git tag -n
      - run: git show-ref --tags -d
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion
      - run: docker run --rm -v "$(pwd):/repo" jjliggett/jjversion | jq --raw-output '.MajorMinorPatch' | grep 1.1.1

  test-commit-incrementing-custom-versioning-settings:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          echo "commit_message_incrementing_enabled: true" >> versioning.yaml
          echo "major_version_bump_message: '^((first):)'" >> versioning.yaml
          echo "minor_version_bump_message: '^((second):)'" >> versioning.yaml
          echo "patch_version_bump_message: '^((third):)'" >> versioning.yaml
          git commit -m "second: initial commit" --allow-empty
          git commit -m "minor: commit" --allow-empty
          git commit -m "third: fix small bug" --allow-empty
          git commit -m "third: fix another bug" --allow-empty
          git commit -m "patch: fix small bug" --allow-empty
          git commit -m "patch: fix another bug" --allow-empty
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.1.2
      - run: |
          git commit -m "first: release 1.0.0" --allow-empty
          git tag v1.0.0
          git commit -m "first: major commit" --allow-empty
          git commit -m "major: major commit" --allow-empty
          git commit -m "third: bugfix" --allow-empty
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 2.0.1

  test-commit-incrementing-no-settings:
    runs-on: ubuntu-latest
    needs: initial-build
    steps:
      - name: Download jjversion
        uses: actions/download-artifact@v2
        with:
          name: jjversion
      - run: chmod +x jjversion
      - run: sudo mv jjversion /usr/local/bin

      - run: mkdir repo && cd repo
      - run: git init
      - run: git config user.email "user@example.com"
      - run: git config user.name "user"
      - run: |
          git commit -m "minor: initial commit" --allow-empty
          git commit -m "patch: fix small bug" --allow-empty
          git commit -m "patch: fix another bug" --allow-empty
      - run: jjversion
      - run: jjversion | jq --raw-output '.MajorMinorPatch' | grep 0.0.0
